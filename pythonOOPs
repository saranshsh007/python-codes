# #it is clearly seen that self and obj is referring to the same object

# class check:
# 	def __init__(self):
# 		print("Address of self = ",id(self))

# obj = check()
# print("Address of class object = ",id(obj))


# # Write Python3 code here

# class car():
	
# 	# init method or constructor
# 	def __init__(self, model, color):
# 		self.model = model
# 		self.color = color
		
# 	def show(self):
# 		print("Model is", self.model )
# 		print("color is", self.color )
		
# # both objects have different self which
# # contain their attributes
# audi = car("audi a4", "blue")
# ferrari = car("ferrari 488", "green")

# audi.show()	 # same output as car.show(audi)
# ferrari.show() # same output as car.show(ferrari)

# #note:we can also do like this
# print("Model for audi is ",audi.model)
# print("Colour for ferrari is ",ferrari.color)
# #this happens because after assigning in the constructor the attributes are linked to that particular object
# #here attributes(model,colour) are linked to objects(audi,ferrari) as we initialize them
# # Behind the scene, in every instance method
# # call, python sends the instances also with
# # that method call like car.show(audi)


# class Dog:

# 	# class attribute
# 	attr1 = "mammal"

# 	# Instance attribute
# 	def __init__(self, name):
# 		self.name = name

# # Driver code
# # Object instantiation
# Rodger = Dog("Rodger")
# Tommy = Dog("Tommy")

# # Accessing class attributes
# print("Rodger is a {}".format(Rodger.__class__.attr1))
# print("Tommy is also a {}".format(Tommy.__class__.attr1))

# # Accessing instance attributes
# print("My name is {}".format(Rodger.name))
# print("My name is {}".format(Tommy.name))

# class Dog:

# 	# class attribute
# 	attr1 = "mammal"

# 	# Instance attribute
# 	def __init__(self, name):
# 		self.name = name
		
# 	def speak(self):
# 		print("My name is {}".format(self.name))

# # Driver code
# # Object instantiation
# Rodger = Dog("Rodger")
# Tommy = Dog("Tommy")

# # Accessing class methods
# Rodger.speak()
# Tommy.speak()


# # Python code to demonstrate how parent constructors
# # are called.

# # parent class
# class Person(object):

# 	# __init__ is known as the constructor
# 	def __init__(self, name, idnumber):
# 		self.name = name
# 		self.idnumber = idnumber

# 	def display(self):
# 		print(self.name)
# 		print(self.idnumber)
		
# 	def details(self):
# 		print("My name is {}".format(self.name))
# 		print("IdNumber: {}".format(self.idnumber))
	
# # child class
# class Employee(Person):
# 	def __init__(self, name, idnumber, salary, post):
# 		self.salary = salary
# 		self.post = post

# 		# invoking the __init__ of the parent class
# 		Person.__init__(self, name, idnumber)
		
# 	def details(self):
# 		print("My name is {}".format(self.name))
# 		print("IdNumber: {}".format(self.idnumber))
# 		print("Post: {}".format(self.post))


# # creation of an object variable or an instance
# a = Employee('Rahul', 886012, 200000, "Intern")

# # calling a function of the class Person using
# # its instance
# a.display()
# a.details()


# class Bird:

# 	def intro(self):
# 		print("There are many types of birds.")

# 	def flight(self):
# 		print("Most of the birds can fly but some cannot.")

# class sparrow(Bird):

# 	def flight(self):
# 		print("Sparrows can fly.")

# class ostrich(Bird):

# 	def flight(self):
# 		print("Ostriches cannot fly.")

# obj_bird = Bird()
# obj_spr = sparrow()
# obj_ost = ostrich()

# obj_bird.intro()
# obj_bird.flight()

# obj_spr.intro()
# obj_spr.flight()

# obj_ost.intro()
# obj_ost.flight()


# # Python program to
# # demonstrate private members

# # Creating a Base class
# class Base:
# 	def __init__(self):
# 		self.a = "GeeksforGeeks"
# 		self.__c = "GeeksforGeeks"

# # Creating a derived class
# class Derived(Base):
# 	def __init__(self):

# 		# Calling constructor of
# 		# Base class
# 		Base.__init__(self)
# 		print("Calling private member of base class: ")
# 		print(self.__c)


# # Driver code
# obj1 = Base()
# print(obj1.a)
# print(obj1.__c)

# # Uncommenting print(obj1.c) will
# # raise an AttributeError

# # Uncommenting obj2 = Derived() will
# # also raise an AtrributeError as
# # private member of base class
# # is called inside derived class


class MyClass:

	# Hidden member of MyClass
	__hiddenVariable = 0
	
	# A member method that changes
	# __hiddenVariable
	def add(self, increment):
		self.__hiddenVariable += increment
		print (self.__hiddenVariable)

# Driver code
myObject = MyClass()	
myObject.add(2)
myObject.add(5)

# This line causes error
print (myObject.__hiddenVariable)
